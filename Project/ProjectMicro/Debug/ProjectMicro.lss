
ProjectMicro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  00000cec  00000d80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080018a  0080018a  00000e0a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bcf  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e9  00000000  00000000  00001afb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000669  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00002950  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b0  00000000  00000000  00002b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ec  00000000  00000000  00002fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000033ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
   4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
   8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
   c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  34:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_13>
  38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  40:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_16>
  44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  48:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_18>
  4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 40       	sbci	r16, 0x00	; 0
  6a:	7a 10       	cpse	r7, r10
  6c:	f3 5a       	subi	r31, 0xA3	; 163
  6e:	00 a0       	ldd	r0, Z+32	; 0x20
  70:	72 4e       	sbci	r23, 0xE2	; 226
  72:	18 09       	sbc	r17, r8
  74:	00 10       	cpse	r0, r0
  76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__stack+0xc3>
  78:	e8 00       	.word	0x00e8	; ????
  7a:	00 e8       	ldi	r16, 0x80	; 128
  7c:	76 48       	sbci	r23, 0x86	; 134
  7e:	17 00       	.word	0x0017	; ????
  80:	00 e4       	ldi	r16, 0x40	; 64
  82:	0b 54       	subi	r16, 0x4B	; 75
  84:	02 00       	.word	0x0002	; ????
  86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
  88:	9a 3b       	cpi	r25, 0xBA	; 186
  8a:	00 00       	nop
  8c:	00 e1       	ldi	r16, 0x10	; 16
  8e:	f5 05       	cpc	r31, r5
  90:	00 00       	nop
  92:	80 96       	adiw	r24, 0x20	; 32
  94:	98 00       	.word	0x0098	; ????
  96:	00 00       	nop
  98:	40 42       	sbci	r20, 0x20	; 32
  9a:	0f 00       	.word	0x000f	; ????
  9c:	00 00       	nop
  9e:	a0 86       	std	Z+8, r10	; 0x08
  a0:	01 00       	.word	0x0001	; ????
  a2:	00 00       	nop
  a4:	10 27       	eor	r17, r16
  a6:	00 00       	nop
  a8:	00 00       	nop
  aa:	e8 03       	fmulsu	r22, r16
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	64 00       	.word	0x0064	; ????
  b2:	00 00       	nop
  b4:	00 00       	nop
  b6:	0a 00       	.word	0x000a	; ????
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	01 00       	.word	0x0001	; ????
  be:	00 00       	nop
  c0:	00 00       	nop
  c2:	2c 76       	andi	r18, 0x6C	; 108
  c4:	d8 88       	ldd	r13, Y+16	; 0x10
  c6:	dc 67       	ori	r29, 0x7C	; 124
  c8:	4f 08       	sbc	r4, r15
  ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
  cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
  ce:	ae 59       	subi	r26, 0x9E	; 158
  d0:	e1 b1       	in	r30, 0x01	; 1
  d2:	b7 96       	adiw	r30, 0x27	; 39
  d4:	e5 e3       	ldi	r30, 0x35	; 53
  d6:	e4 53       	subi	r30, 0x34	; 52
  d8:	c6 3a       	cpi	r28, 0xA6	; 166
  da:	e6 51       	subi	r30, 0x16	; 22
  dc:	99 76       	andi	r25, 0x69	; 105
  de:	96 e8       	ldi	r25, 0x86	; 134
  e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <__mulsf3+0x2>
  e2:	84 26       	eor	r8, r20
  e4:	eb 89       	ldd	r30, Y+19	; 0x13
  e6:	8c 9b       	sbis	0x11, 4	; 17
  e8:	62 ed       	ldi	r22, 0xD2	; 210
  ea:	40 7c       	andi	r20, 0xC0	; 192
  ec:	6f fc       	.word	0xfc6f	; ????
  ee:	ef bc       	out	0x2f, r14	; 47
  f0:	9c 9f       	mul	r25, r28
  f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
  f4:	ba a5       	ldd	r27, Y+42	; 0x2a
  f6:	6f a5       	ldd	r22, Y+47	; 0x2f
  f8:	f4 90       	lpm	r15, Z
  fa:	05 5a       	subi	r16, 0xA5	; 165
  fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
  fe:	5c 93       	st	X, r21
 100:	6b 6c       	ori	r22, 0xCB	; 203
 102:	f9 67       	ori	r31, 0x79	; 121
 104:	6d c1       	rjmp	.+730    	; 0x3e0 <enviaDistancia+0x5c>
 106:	1b fc       	.word	0xfc1b	; ????
 108:	e0 e4       	ldi	r30, 0x40	; 64
 10a:	0d 47       	sbci	r16, 0x7D	; 125
 10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
 10e:	20 e6       	ldi	r18, 0x60	; 96
 110:	b5 00       	.word	0x00b5	; ????
 112:	d0 ed       	ldi	r29, 0xD0	; 208
 114:	90 2e       	mov	r9, r16
 116:	03 00       	.word	0x0003	; ????
 118:	94 35       	cpi	r25, 0x54	; 84
 11a:	77 05       	cpc	r23, r7
 11c:	00 80       	ld	r0, Z
 11e:	84 1e       	adc	r8, r20
 120:	08 00       	.word	0x0008	; ????
 122:	00 20       	and	r0, r0
 124:	4e 0a       	sbc	r4, r30
 126:	00 00       	nop
 128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
 12a:	0c 33       	cpi	r16, 0x3C	; 60
 12c:	33 33       	cpi	r19, 0x33	; 51
 12e:	33 0f       	add	r19, r19
 130:	98 6e       	ori	r25, 0xE8	; 232
 132:	12 83       	std	Z+2, r17	; 0x02
 134:	11 41       	sbci	r17, 0x11	; 17
 136:	ef 8d       	ldd	r30, Y+31	; 0x1f
 138:	21 14       	cp	r2, r1
 13a:	89 3b       	cpi	r24, 0xB9	; 185
 13c:	e6 55       	subi	r30, 0x56	; 86
 13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
 140:	fe e6       	ldi	r31, 0x6E	; 110
 142:	db 18       	sub	r13, r11
 144:	d1 84       	ldd	r13, Z+9	; 0x09
 146:	4b 38       	cpi	r20, 0x8B	; 139
 148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
 14a:	7c 1d       	adc	r23, r12
 14c:	90 1d       	adc	r25, r0
 14e:	a4 bb       	out	0x14, r26	; 20
 150:	e4 24       	eor	r14, r4
 152:	20 32       	cpi	r18, 0x20	; 32
 154:	84 72       	andi	r24, 0x24	; 36
 156:	5e 22       	and	r5, r30
 158:	81 00       	.word	0x0081	; ????
 15a:	c9 f1       	breq	.+114    	; 0x1ce <char2int+0x2e>
 15c:	24 ec       	ldi	r18, 0xC4	; 196
 15e:	a1 e5       	ldi	r26, 0x51	; 81
 160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	d8 e0       	ldi	r29, 0x08	; 8
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	ec ee       	ldi	r30, 0xEC	; 236
 176:	fc e0       	ldi	r31, 0x0C	; 12
 178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
 17a:	05 90       	lpm	r0, Z+
 17c:	0d 92       	st	X+, r0
 17e:	aa 38       	cpi	r26, 0x8A	; 138
 180:	b1 07       	cpc	r27, r17
 182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	aa e8       	ldi	r26, 0x8A	; 138
 188:	b1 e0       	ldi	r27, 0x01	; 1
 18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
 18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
 18e:	ab 39       	cpi	r26, 0x9B	; 155
 190:	b2 07       	cpc	r27, r18
 192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
 194:	0e 94 80 02 	call	0x500	; 0x500 <main>
 198:	0c 94 74 06 	jmp	0xce8	; 0xce8 <_exit>

0000019c <__bad_interrupt>:
 19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <char2int>:
	
// Operação de "Entre"	
#define BETWEEN(value, min, max) (value < max && value > min)
	
// Função necessária para transformar um array de char numa variavel inteira
int char2int (char *array, size_t n){				
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	dc 01       	movw	r26, r24
	int number = 0;									// Inteiro que vai retornar
	int mult = 1;									// Multiplicador
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	30 e0       	ldi	r19, 0x00	; 0
// Operação de "Entre"	
#define BETWEEN(value, min, max) (value < max && value > min)
	
// Função necessária para transformar um array de char numa variavel inteira
int char2int (char *array, size_t n){				
	int number = 0;									// Inteiro que vai retornar
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
	int mult = 1;									// Multiplicador
	while (n--){									// por cada caracter no vetor
 1ae:	1c c0       	rjmp	.+56     	; 0x1e8 <char2int+0x48>
		// Numero igual à conversao para inteiro multiplicado por mult, que vai definir a posição do numero
		number += (array[n] - '0') * mult;			
 1b0:	ed 01       	movw	r28, r26
 1b2:	ce 0f       	add	r28, r30
 1b4:	df 1f       	adc	r29, r31
 1b6:	48 81       	ld	r20, Y
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	40 53       	subi	r20, 0x30	; 48
 1bc:	51 09       	sbc	r21, r1
 1be:	24 9f       	mul	r18, r20
 1c0:	b0 01       	movw	r22, r0
 1c2:	25 9f       	mul	r18, r21
 1c4:	70 0d       	add	r23, r0
 1c6:	34 9f       	mul	r19, r20
 1c8:	70 0d       	add	r23, r0
 1ca:	11 24       	eor	r1, r1
 1cc:	86 0f       	add	r24, r22
 1ce:	97 1f       	adc	r25, r23
		mult *= 10;
 1d0:	a9 01       	movw	r20, r18
 1d2:	44 0f       	add	r20, r20
 1d4:	55 1f       	adc	r21, r21
 1d6:	22 0f       	add	r18, r18
 1d8:	33 1f       	adc	r19, r19
 1da:	22 0f       	add	r18, r18
 1dc:	33 1f       	adc	r19, r19
 1de:	22 0f       	add	r18, r18
 1e0:	33 1f       	adc	r19, r19
 1e2:	24 0f       	add	r18, r20
 1e4:	35 1f       	adc	r19, r21
	
// Função necessária para transformar um array de char numa variavel inteira
int char2int (char *array, size_t n){				
	int number = 0;									// Inteiro que vai retornar
	int mult = 1;									// Multiplicador
	while (n--){									// por cada caracter no vetor
 1e6:	bf 01       	movw	r22, r30
 1e8:	fb 01       	movw	r30, r22
 1ea:	31 97       	sbiw	r30, 0x01	; 1
 1ec:	67 2b       	or	r22, r23
 1ee:	01 f7       	brne	.-64     	; 0x1b0 <char2int+0x10>
		// Numero igual à conversao para inteiro multiplicado por mult, que vai definir a posição do numero
		number += (array[n] - '0') * mult;			
		mult *= 10;
	}
	return number;
}
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <USART_Init>:
char data;											// Inicializa variavel data
unsigned char tecla;								// Inicializa a variavel tecla
	
// Funções necessárias à utilização do USART	
void USART_Init (unsigned int ubrr){				// Função para Inicialização da USART
	UBRR0 = ubrr;									// Ajusta a Taxa de Transmissão
 1f6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);					// Ativa o transmissor e o recetor
 1fe:	88 e1       	ldi	r24, 0x18	; 24
 200:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 204:	08 95       	ret

00000206 <USART_Transmit>:
}
	
void USART_Transmit (char data){					// Função de Transmissão de Dados
	while(!(UCSR0A & (1<<UDRE0)));					// Operação while para garantir que o registo de transmissão está vazio
 206:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 20a:	95 ff       	sbrs	r25, 5
 20c:	fc cf       	rjmp	.-8      	; 0x206 <USART_Transmit>
	UDR0 = (data++);								// Serve para colocar os dados e enviar para o USART
 20e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 212:	08 95       	ret

00000214 <USART_Receive>:
}
	
char USART_Receive (void){							// Função de Receção de Dados
	while(!(UCSR0A & (1<<RXC0)));					// Enquanto não detetar o stop bit
 214:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 218:	88 23       	and	r24, r24
 21a:	e4 f7       	brge	.-8      	; 0x214 <USART_Receive>
	return UDR0;									// Lê o registo e retorna
 21c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 220:	08 95       	ret

00000222 <enviaString>:
	
void enviaString(unsigned char string[]){			// Função para enviar uma string		
 222:	0f 93       	push	r16
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	8c 01       	movw	r16, r24
	unsigned int i=0;								// Variavel de posição no string
 22c:	c0 e0       	ldi	r28, 0x00	; 0
 22e:	d0 e0       	ldi	r29, 0x00	; 0
	while(string[i] != 0){							// Enquanto houver caracteres
 230:	03 c0       	rjmp	.+6      	; 0x238 <enviaString+0x16>
		USART_Transmit(string[i]);					// Envia os caracteres
 232:	0e 94 03 01 	call	0x206	; 0x206 <USART_Transmit>
		i++;										// Incrementa i
 236:	21 96       	adiw	r28, 0x01	; 1
	return UDR0;									// Lê o registo e retorna
}
	
void enviaString(unsigned char string[]){			// Função para enviar uma string		
	unsigned int i=0;								// Variavel de posição no string
	while(string[i] != 0){							// Enquanto houver caracteres
 238:	f8 01       	movw	r30, r16
 23a:	ec 0f       	add	r30, r28
 23c:	fd 1f       	adc	r31, r29
 23e:	80 81       	ld	r24, Z
 240:	81 11       	cpse	r24, r1
 242:	f7 cf       	rjmp	.-18     	; 0x232 <enviaString+0x10>
		USART_Transmit(string[i]);					// Envia os caracteres
		i++;										// Incrementa i
	}
}
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	08 95       	ret

0000024e <__vector_18>:

ISR(USART_RX_vect){									// Interrupção da USART
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	8f 93       	push	r24
	data = UDR0;									// Dá a variavel data o valor do registo UDR0
 25a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 25e:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <data>
}
 262:	8f 91       	pop	r24
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <timer0>:

//====================================================================================//
//										TIMERS							              //
//====================================================================================//
void timer0(void) {
	TCCR0A = (0<<WGM00);							// Modo Normal
 26e:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (0b011 << CS00);						// Prescaler de 64
 270:	83 e0       	ldi	r24, 0x03	; 3
 272:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 256-250;								// Valor inicial de contagem
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);							// Ativação da Interrupção do timer0
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	sei();											// Ativação Interrupções Globais
 27e:	78 94       	sei
 280:	08 95       	ret

00000282 <__vector_16>:
}

volatile unsigned char cont_ovf0 = 0;				// Inicializa a variavel de contagem de Overflows

ISR(TIMER0_OVF_vect){								// Interrupção Timer0
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	8f 93       	push	r24
	TCNT0 = 6;										// Valor inicial de contagem
 28e:	86 e0       	ldi	r24, 0x06	; 6
 290:	86 bd       	out	0x26, r24	; 38
	cont_ovf0++;									// Incrementa o contador à passagem de 1ms
 292:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <cont_ovf0>
 296:	8f 5f       	subi	r24, 0xFF	; 255
 298:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <cont_ovf0>
}
 29c:	8f 91       	pop	r24
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <timer1>:

void timer1(void){		// Função Timer1 para uso das interrupções
	TCCR1A = 0x00;
 2a8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	// WGM13:0 = 0000 para modo normal;
	// COM1A1:0 = 0 e COM1B1:0 = 0 no modo normal
	
	TCCR1B = 0x03;
 2ac:	83 e0       	ldi	r24, 0x03	; 3
 2ae:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	// WGM13:0 = 0000 para modo normal;
	// CS12:0 = 011 para relógio interno com divisor por 64;
	// ICNC1 = 0 e ICES1 = 0 no modo normal
		
	TCCR1C = 0x00;
 2b2:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
	// FOC1A = 0 e FOC1B = 0 no modo normal
		
	TIMSK1 = (1 << TOIE1);
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	// Ativa as interrupções do Timer1
	
	TCNT1 = 65286;
 2bc:	86 e0       	ldi	r24, 0x06	; 6
 2be:	9f ef       	ldi	r25, 0xFF	; 255
 2c0:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 2c4:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	// Valor inicial de contagem = 2^16-250 = 65286	
	
	sei();
 2c8:	78 94       	sei
 2ca:	08 95       	ret

000002cc <__vector_13>:
	// Ativação Interrupções Globais	
}

volatile unsigned char cont_ovf1 = 0;				// Inicializa a variavel de contagem de Overflows

ISR(TIMER1_OVF_vect){								// Interrupção Timer1
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
	TCNT1 = 65286;									// Valor inicial de contagem
 2da:	86 e0       	ldi	r24, 0x06	; 6
 2dc:	9f ef       	ldi	r25, 0xFF	; 255
 2de:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 2e2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	cont_ovf1++;									// Incrementa o contador à passagem de 1ms
 2e6:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <__data_end>
 2ea:	8f 5f       	subi	r24, 0xFF	; 255
 2ec:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <__data_end>
}
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <trigger>:
#define SR_Trigger			PINB1
#define SR_Echo				PINB0
#define ECHO				(1<<SR_Echo)
  
void trigger(){										// Função que ativa o trigger
	PORTB |= 1<<SR_Trigger;							// Ativa o Trigger
 2fe:	85 b1       	in	r24, 0x05	; 5
 300:	82 60       	ori	r24, 0x02	; 2
 302:	85 b9       	out	0x05, r24	; 5
	while (cont_ovf0 != 60);						// Aguarda até que o nº de Overflows seja 60 (60ms)
 304:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <cont_ovf0>
 308:	8c 33       	cpi	r24, 0x3C	; 60
 30a:	e1 f7       	brne	.-8      	; 0x304 <trigger+0x6>
	PORTB &= ~(1<<SR_Trigger);						// Desativa o Trigger
 30c:	85 b1       	in	r24, 0x05	; 5
 30e:	8d 7f       	andi	r24, 0xFD	; 253
 310:	85 b9       	out	0x05, r24	; 5
 312:	08 95       	ret

00000314 <HCSR04_Init>:
}
  
void HCSR04_Init(){									// Função que inicializa o Sensor HC-SR04	
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
	TCNT1 = 0;										// Coloca os registos de contagem a 0
 318:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 31c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	trigger();										// Aciona o Trigger do Sensor
 320:	0e 94 7f 01 	call	0x2fe	; 0x2fe <trigger>
	while((PINB & ECHO) == 0);						// Enquanto o Echo não estiver a receber ondas
 324:	18 9b       	sbis	0x03, 0	; 3
 326:	fe cf       	rjmp	.-4      	; 0x324 <HCSR04_Init+0x10>
	TCCR1B = (1<<CS10);								// Inicia o Timer1
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	while((PINB & ECHO) != 0);						// Enquanto o Echo estiver a receber ondas
 32e:	18 99       	sbic	0x03, 0	; 3
 330:	fe cf       	rjmp	.-4      	; 0x32e <HCSR04_Init+0x1a>
	TCCR1B = 0;										// Interrompe o Timer1
 332:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	distance = TCNT1*0.68;							// Variavel que guarda a distancia
 336:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 33a:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__floatunsisf>
 346:	2b e7       	ldi	r18, 0x7B	; 123
 348:	34 e1       	ldi	r19, 0x14	; 20
 34a:	4e e2       	ldi	r20, 0x2E	; 46
 34c:	5f e3       	ldi	r21, 0x3F	; 63
 34e:	0e 94 56 03 	call	0x6ac	; 0x6ac <__mulsf3>
 352:	0e 94 ba 02 	call	0x574	; 0x574 <__fixsfsi>
 356:	70 93 96 01 	sts	0x0196, r23	; 0x800196 <distance+0x1>
 35a:	60 93 95 01 	sts	0x0195, r22	; 0x800195 <distance>
	dtostrf(distance, 2, 0, vetor);					// Transforma a variavel distance num vetor
 35e:	60 91 95 01 	lds	r22, 0x0195	; 0x800195 <distance>
 362:	70 91 96 01 	lds	r23, 0x0196	; 0x800196 <distance+0x1>
 366:	07 2e       	mov	r0, r23
 368:	00 0c       	add	r0, r0
 36a:	88 0b       	sbc	r24, r24
 36c:	99 0b       	sbc	r25, r25
 36e:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__floatsisf>
 372:	0c e8       	ldi	r16, 0x8C	; 140
 374:	11 e0       	ldi	r17, 0x01	; 1
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	42 e0       	ldi	r20, 0x02	; 2
 37a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <dtostrf>
}
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	08 95       	ret

00000384 <enviaDistancia>:
  
void enviaDistancia(char numChar){					// Função que envia a distancia para o USART
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
 390:	61 97       	sbiw	r28, 0x11	; 17
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	f8 94       	cli
 396:	de bf       	out	0x3e, r29	; 62
 398:	0f be       	out	0x3f, r0	; 63
 39a:	cd bf       	out	0x3d, r28	; 61
 39c:	08 2f       	mov	r16, r24
	uint8_t i;										// Variavel para posição no vetor
	char mm[4] = " mm.";							// Unidade da distancia
 39e:	80 e2       	ldi	r24, 0x20	; 32
 3a0:	9d e6       	ldi	r25, 0x6D	; 109
 3a2:	9a 83       	std	Y+2, r25	; 0x02
 3a4:	89 83       	std	Y+1, r24	; 0x01
 3a6:	8d e6       	ldi	r24, 0x6D	; 109
 3a8:	9e e2       	ldi	r25, 0x2E	; 46
 3aa:	9c 83       	std	Y+4, r25	; 0x04
 3ac:	8b 83       	std	Y+3, r24	; 0x03
	char distancia[13] = "\n\nDistancia:  ";		// Distancia:
 3ae:	8d e0       	ldi	r24, 0x0D	; 13
 3b0:	e4 e0       	ldi	r30, 0x04	; 4
 3b2:	f1 e0       	ldi	r31, 0x01	; 1
 3b4:	de 01       	movw	r26, r28
 3b6:	15 96       	adiw	r26, 0x05	; 5
 3b8:	01 90       	ld	r0, Z+
 3ba:	0d 92       	st	X+, r0
 3bc:	8a 95       	dec	r24
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <enviaDistancia+0x34>
	for(i = 0; i<sizeof(distancia); i++){			// Percorre as posições dos chars do vetor
 3c0:	10 e0       	ldi	r17, 0x00	; 0
 3c2:	0a c0       	rjmp	.+20     	; 0x3d8 <enviaDistancia+0x54>
		USART_Transmit(distancia[i]);				// Transmite a string char a char
 3c4:	e5 e0       	ldi	r30, 0x05	; 5
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	ec 0f       	add	r30, r28
 3ca:	fd 1f       	adc	r31, r29
 3cc:	e1 0f       	add	r30, r17
 3ce:	f1 1d       	adc	r31, r1
 3d0:	80 81       	ld	r24, Z
 3d2:	0e 94 03 01 	call	0x206	; 0x206 <USART_Transmit>
  
void enviaDistancia(char numChar){					// Função que envia a distancia para o USART
	uint8_t i;										// Variavel para posição no vetor
	char mm[4] = " mm.";							// Unidade da distancia
	char distancia[13] = "\n\nDistancia:  ";		// Distancia:
	for(i = 0; i<sizeof(distancia); i++){			// Percorre as posições dos chars do vetor
 3d6:	1f 5f       	subi	r17, 0xFF	; 255
 3d8:	1d 30       	cpi	r17, 0x0D	; 13
 3da:	a0 f3       	brcs	.-24     	; 0x3c4 <enviaDistancia+0x40>
 3dc:	10 e0       	ldi	r17, 0x00	; 0
 3de:	08 c0       	rjmp	.+16     	; 0x3f0 <enviaDistancia+0x6c>
		USART_Transmit(distancia[i]);				// Transmite a string char a char
	}
	for(i = 0; i<numChar; i++){						// Percorre as posições dos chars do vetor
		USART_Transmit(vetor[i]);					// Transmite a distancia contida no vetor
 3e0:	e1 2f       	mov	r30, r17
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	e4 57       	subi	r30, 0x74	; 116
 3e6:	fe 4f       	sbci	r31, 0xFE	; 254
 3e8:	80 81       	ld	r24, Z
 3ea:	0e 94 03 01 	call	0x206	; 0x206 <USART_Transmit>
	char mm[4] = " mm.";							// Unidade da distancia
	char distancia[13] = "\n\nDistancia:  ";		// Distancia:
	for(i = 0; i<sizeof(distancia); i++){			// Percorre as posições dos chars do vetor
		USART_Transmit(distancia[i]);				// Transmite a string char a char
	}
	for(i = 0; i<numChar; i++){						// Percorre as posições dos chars do vetor
 3ee:	1f 5f       	subi	r17, 0xFF	; 255
 3f0:	10 17       	cp	r17, r16
 3f2:	b0 f3       	brcs	.-20     	; 0x3e0 <enviaDistancia+0x5c>
 3f4:	10 e0       	ldi	r17, 0x00	; 0
 3f6:	0a c0       	rjmp	.+20     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		USART_Transmit(vetor[i]);					// Transmite a distancia contida no vetor
	}
	for(i = 0; i<sizeof(mm); i++){					// Percorre as posições dos chars do vetor
		USART_Transmit(mm[i]);						// Transmite a string char a char
 3f8:	e1 e0       	ldi	r30, 0x01	; 1
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	ec 0f       	add	r30, r28
 3fe:	fd 1f       	adc	r31, r29
 400:	e1 0f       	add	r30, r17
 402:	f1 1d       	adc	r31, r1
 404:	80 81       	ld	r24, Z
 406:	0e 94 03 01 	call	0x206	; 0x206 <USART_Transmit>
		USART_Transmit(distancia[i]);				// Transmite a string char a char
	}
	for(i = 0; i<numChar; i++){						// Percorre as posições dos chars do vetor
		USART_Transmit(vetor[i]);					// Transmite a distancia contida no vetor
	}
	for(i = 0; i<sizeof(mm); i++){					// Percorre as posições dos chars do vetor
 40a:	1f 5f       	subi	r17, 0xFF	; 255
 40c:	14 30       	cpi	r17, 0x04	; 4
 40e:	a0 f3       	brcs	.-24     	; 0x3f8 <enviaDistancia+0x74>
		USART_Transmit(mm[i]);						// Transmite a string char a char
	}
}
 410:	61 96       	adiw	r28, 0x11	; 17
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	f8 94       	cli
 416:	de bf       	out	0x3e, r29	; 62
 418:	0f be       	out	0x3f, r0	; 63
 41a:	cd bf       	out	0x3d, r28	; 61
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	1f 91       	pop	r17
 422:	0f 91       	pop	r16
 424:	08 95       	ret

00000426 <buzzer>:
//										BUZZER							              //
//====================================================================================//
volatile unsigned char nmr_ovf;						// Inicializa a variavel de nº de Overflows desejado

void buzzer(){										// Função que vai produzir o som do Buzzer	
	TCNT0 = 0;										// Reset no Timer0
 426:	16 bc       	out	0x26, r1	; 38
	cont_ovf0 = 0;									// Reset no Contador de Overflows
 428:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <cont_ovf0>
	PORTC = 0xff;									// Liga o buzzer conectado no PORTC							
 42c:	8f ef       	ldi	r24, 0xFF	; 255
 42e:	88 b9       	out	0x08, r24	; 8
	while(cont_ovf0 != 100);						// Aguarda até que o nº de Overflows seja 100
 430:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <cont_ovf0>
 434:	84 36       	cpi	r24, 0x64	; 100
 436:	e1 f7       	brne	.-8      	; 0x430 <buzzer+0xa>
	PORTC = 0x00;									// Desliga o buzzer conectado no PORTC	
 438:	18 b8       	out	0x08, r1	; 8
 43a:	08 95       	ret

0000043c <buzzerIntervalo>:
}

volatile unsigned char buzzerIntervalo(nmr_ovf){	// Função que recebe o intervalo de tempo pretendido entre apitos 
	TCNT0 = 0;										// Reset no Timer0
 43c:	16 bc       	out	0x26, r1	; 38
	cont_ovf0 = 0;									// Reset no Contador de Overflows
 43e:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <cont_ovf0>
	while(cont_ovf0 != nmr_ovf);					// Aguarda até que o nº de Overflows seja igual ao nº de Overflows pretendido
 442:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <cont_ovf0>
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	28 17       	cp	r18, r24
 44a:	39 07       	cpc	r19, r25
 44c:	d1 f7       	brne	.-12     	; 0x442 <buzzerIntervalo+0x6>
	buzzer();										// Função que vai produzir o som do Buzzer
 44e:	0e 94 13 02 	call	0x426	; 0x426 <buzzer>
}
 452:	08 95       	ret

00000454 <buzzerVermelho>:

void buzzerVermelho(){								// Função do Comportamento do Buzzer relativamente ao LED Vermelho
	// Buzzer apita 3 vezes em intervalos de 10ms
	buzzerIntervalo(75);
 454:	8b e4       	ldi	r24, 0x4B	; 75
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	0e 94 1e 02 	call	0x43c	; 0x43c <buzzerIntervalo>
	buzzerIntervalo(75);
 45c:	8b e4       	ldi	r24, 0x4B	; 75
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 1e 02 	call	0x43c	; 0x43c <buzzerIntervalo>
	buzzerIntervalo(75);
 464:	8b e4       	ldi	r24, 0x4B	; 75
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 1e 02 	call	0x43c	; 0x43c <buzzerIntervalo>
 46c:	08 95       	ret

0000046e <buzzerAmarelo>:
}

void buzzerAmarelo(){								// Função do Comportamento do Buzzer relativamente ao LED Amarelo
	// Buzzer apita 2 vezes em intervalos de 50ms
	buzzerIntervalo(150);
 46e:	86 e9       	ldi	r24, 0x96	; 150
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 1e 02 	call	0x43c	; 0x43c <buzzerIntervalo>
	buzzerIntervalo(150);
 476:	86 e9       	ldi	r24, 0x96	; 150
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 1e 02 	call	0x43c	; 0x43c <buzzerIntervalo>
 47e:	08 95       	ret

00000480 <sensorEstacionamento>:
//								SENSOR DE ESTACIONAMENTO				              //
//====================================================================================//
int distancia;										// Variavel inteira de distancia

void sensorEstacionamento(){
	if (distancia > 0)								// Se a distancia for maior que 0
 480:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <distancia>
 484:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <distancia+0x1>
 488:	18 16       	cp	r1, r24
 48a:	19 06       	cpc	r1, r25
 48c:	ac f5       	brge	.+106    	; 0x4f8 <sensorEstacionamento+0x78>
	{
		enviaDistancia(3);
 48e:	83 e0       	ldi	r24, 0x03	; 3
 490:	0e 94 c2 01 	call	0x384	; 0x384 <enviaDistancia>
		if (BETWEEN(distancia,191,260))				// Se a distancia for entre 191 e 260mm
 494:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <distancia>
 498:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <distancia+0x1>
 49c:	80 5c       	subi	r24, 0xC0	; 192
 49e:	91 09       	sbc	r25, r1
 4a0:	84 34       	cpi	r24, 0x44	; 68
 4a2:	91 05       	cpc	r25, r1
 4a4:	30 f4       	brcc	.+12     	; 0x4b2 <sensorEstacionamento+0x32>
		{
			PORTD &= ~(LED_RED|LED_YELLOW);			// Desliga os LEDs Vermelho e Amarelo
 4a6:	8b b1       	in	r24, 0x0b	; 11
 4a8:	8f 7a       	andi	r24, 0xAF	; 175
 4aa:	8b b9       	out	0x0b, r24	; 11
			PORTD |= LED_GREEN;						// Liga o LED Verde
 4ac:	8b b1       	in	r24, 0x0b	; 11
 4ae:	80 62       	ori	r24, 0x20	; 32
 4b0:	8b b9       	out	0x0b, r24	; 11
		}
		if (BETWEEN(distancia,100,190))				// Se a distancia for entre 100 e 190mm
 4b2:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <distancia>
 4b6:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <distancia+0x1>
 4ba:	85 56       	subi	r24, 0x65	; 101
 4bc:	91 09       	sbc	r25, r1
 4be:	89 35       	cpi	r24, 0x59	; 89
 4c0:	91 05       	cpc	r25, r1
 4c2:	40 f4       	brcc	.+16     	; 0x4d4 <sensorEstacionamento+0x54>
		{
			PORTD &= ~(LED_RED|LED_GREEN);			// Desliga os LEDs Vermelho e Verde
 4c4:	8b b1       	in	r24, 0x0b	; 11
 4c6:	8f 7c       	andi	r24, 0xCF	; 207
 4c8:	8b b9       	out	0x0b, r24	; 11
			PORTD |= LED_YELLOW;					// Liga o LED Amarelo
 4ca:	8b b1       	in	r24, 0x0b	; 11
 4cc:	80 64       	ori	r24, 0x40	; 64
 4ce:	8b b9       	out	0x0b, r24	; 11
			buzzerAmarelo();						// Comportamento do Buzzer relativo ao LED Amarelo
 4d0:	0e 94 37 02 	call	0x46e	; 0x46e <buzzerAmarelo>
		}
		if (distancia < 100 || distancia > 330)		// Se a distancia for menor que 100mm ou maior que 300mm
 4d4:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <distancia>
 4d8:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <distancia+0x1>
 4dc:	84 56       	subi	r24, 0x64	; 100
 4de:	91 09       	sbc	r25, r1
 4e0:	87 3e       	cpi	r24, 0xE7	; 231
 4e2:	91 05       	cpc	r25, r1
 4e4:	60 f0       	brcs	.+24     	; 0x4fe <sensorEstacionamento+0x7e>
		{
			PORTD &= ~(LED_YELLOW|LED_GREEN);		// Desliga os LEDs Amarelo e Verde
 4e6:	8b b1       	in	r24, 0x0b	; 11
 4e8:	8f 79       	andi	r24, 0x9F	; 159
 4ea:	8b b9       	out	0x0b, r24	; 11
			PORTD |= LED_RED;						// Liga o LED Vermelho
 4ec:	8b b1       	in	r24, 0x0b	; 11
 4ee:	80 61       	ori	r24, 0x10	; 16
 4f0:	8b b9       	out	0x0b, r24	; 11
			buzzerVermelho();						// Comportamento do Buzzer relativo ao LED Vermelho
 4f2:	0e 94 2a 02 	call	0x454	; 0x454 <buzzerVermelho>
 4f6:	08 95       	ret
		}
		}else {										// Caso a distancia não esteja no intervalo pretendido
		PORTD &= ~(LED_RED|LED_YELLOW|LED_GREEN);	// Desliga todos os LEDs
 4f8:	8b b1       	in	r24, 0x0b	; 11
 4fa:	8f 78       	andi	r24, 0x8F	; 143
 4fc:	8b b9       	out	0x0b, r24	; 11
 4fe:	08 95       	ret

00000500 <main>:
	
//====================================================================================//
//										MAIN							              //
//====================================================================================//
int main(){
	USART_Init(MYUBRR);									// Inicialização da rotina de configuração da USART0
 500:	87 e6       	ldi	r24, 0x67	; 103
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <USART_Init>
	
	DDRD = 0x70;										// Coloca os LEDs como Output	
 508:	80 e7       	ldi	r24, 0x70	; 112
 50a:	8a b9       	out	0x0a, r24	; 10
	
	timer0();											// Inicia o Timer0
 50c:	0e 94 37 01 	call	0x26e	; 0x26e <timer0>
	timer1();											// Inicia o Timer1								
 510:	0e 94 54 01 	call	0x2a8	; 0x2a8 <timer1>
	
	DDRB = (1<<SR_Trigger);								// Coloca o pino Trigger como Input 
 514:	82 e0       	ldi	r24, 0x02	; 2
 516:	84 b9       	out	0x04, r24	; 4
	
	DDRC = 0xff;										// Configura a PORTC como Output  
 518:	8f ef       	ldi	r24, 0xFF	; 255
 51a:	87 b9       	out	0x07, r24	; 7
	
	while(1){
		enviaString(menu);								// Envia para o USART o menu
 51c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <menu>
 520:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <menu+0x1>
 524:	0e 94 11 01 	call	0x222	; 0x222 <enviaString>
		tecla = USART_Receive();						// A USART recebe a tecla pressionada e dá esse valor a tecla
 528:	0e 94 0a 01 	call	0x214	; 0x214 <USART_Receive>
 52c:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <tecla>
		switch(tecla){		
 530:	8e 36       	cpi	r24, 0x6E	; 110
 532:	c9 f0       	breq	.+50     	; 0x566 <main+0x66>
 534:	83 37       	cpi	r24, 0x73	; 115
 536:	89 f0       	breq	.+34     	; 0x55a <main+0x5a>
 538:	f1 cf       	rjmp	.-30     	; 0x51c <main+0x1c>
			case 's':									// Caso seja pressionada a tecla s
				for (int i=0; i<15; i++){				// Faz 15 medições
					HCSR04_Init();						// Função que inicializa o Sensor HC-SR04
 53a:	0e 94 8a 01 	call	0x314	; 0x314 <HCSR04_Init>
					distancia = char2int(vetor,3);		// Inicializa a variavel distancia com o valor inteiro de vetor
 53e:	63 e0       	ldi	r22, 0x03	; 3
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	8c e8       	ldi	r24, 0x8C	; 140
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <char2int>
 54a:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <distancia+0x1>
 54e:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <distancia>
					sensorEstacionamento();				// Inicia o comportamento do Sensor de Estacionamento
 552:	0e 94 40 02 	call	0x480	; 0x480 <sensorEstacionamento>
	while(1){
		enviaString(menu);								// Envia para o USART o menu
		tecla = USART_Receive();						// A USART recebe a tecla pressionada e dá esse valor a tecla
		switch(tecla){		
			case 's':									// Caso seja pressionada a tecla s
				for (int i=0; i<15; i++){				// Faz 15 medições
 556:	21 96       	adiw	r28, 0x01	; 1
 558:	02 c0       	rjmp	.+4      	; 0x55e <main+0x5e>
	DDRC = 0xff;										// Configura a PORTC como Output  
	
	while(1){
		enviaString(menu);								// Envia para o USART o menu
		tecla = USART_Receive();						// A USART recebe a tecla pressionada e dá esse valor a tecla
		switch(tecla){		
 55a:	c0 e0       	ldi	r28, 0x00	; 0
 55c:	d0 e0       	ldi	r29, 0x00	; 0
			case 's':									// Caso seja pressionada a tecla s
				for (int i=0; i<15; i++){				// Faz 15 medições
 55e:	cf 30       	cpi	r28, 0x0F	; 15
 560:	d1 05       	cpc	r29, r1
 562:	5c f3       	brlt	.-42     	; 0x53a <main+0x3a>
 564:	db cf       	rjmp	.-74     	; 0x51c <main+0x1c>
					distancia = char2int(vetor,3);		// Inicializa a variavel distancia com o valor inteiro de vetor
					sensorEstacionamento();				// Inicia o comportamento do Sensor de Estacionamento
				}
				break;
			case 'n':									// Caso seja pressionada a tecla n
			enviaString(nao);							// Envia para a USART a mensagem nao
 566:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 56a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 56e:	0e 94 11 01 	call	0x222	; 0x222 <enviaString>
			break;	
 572:	d4 cf       	rjmp	.-88     	; 0x51c <main+0x1c>

00000574 <__fixsfsi>:
 574:	0e 94 c1 02 	call	0x582	; 0x582 <__fixunssfsi>
 578:	68 94       	set
 57a:	b1 11       	cpse	r27, r1
 57c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_szero>
 580:	08 95       	ret

00000582 <__fixunssfsi>:
 582:	0e 94 35 03 	call	0x66a	; 0x66a <__fp_splitA>
 586:	88 f0       	brcs	.+34     	; 0x5aa <__fixunssfsi+0x28>
 588:	9f 57       	subi	r25, 0x7F	; 127
 58a:	98 f0       	brcs	.+38     	; 0x5b2 <__fixunssfsi+0x30>
 58c:	b9 2f       	mov	r27, r25
 58e:	99 27       	eor	r25, r25
 590:	b7 51       	subi	r27, 0x17	; 23
 592:	b0 f0       	brcs	.+44     	; 0x5c0 <__fixunssfsi+0x3e>
 594:	e1 f0       	breq	.+56     	; 0x5ce <__fixunssfsi+0x4c>
 596:	66 0f       	add	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	88 1f       	adc	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	1a f0       	brmi	.+6      	; 0x5a6 <__fixunssfsi+0x24>
 5a0:	ba 95       	dec	r27
 5a2:	c9 f7       	brne	.-14     	; 0x596 <__fixunssfsi+0x14>
 5a4:	14 c0       	rjmp	.+40     	; 0x5ce <__fixunssfsi+0x4c>
 5a6:	b1 30       	cpi	r27, 0x01	; 1
 5a8:	91 f0       	breq	.+36     	; 0x5ce <__fixunssfsi+0x4c>
 5aa:	0e 94 4f 03 	call	0x69e	; 0x69e <__fp_zero>
 5ae:	b1 e0       	ldi	r27, 0x01	; 1
 5b0:	08 95       	ret
 5b2:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__fp_zero>
 5b6:	67 2f       	mov	r22, r23
 5b8:	78 2f       	mov	r23, r24
 5ba:	88 27       	eor	r24, r24
 5bc:	b8 5f       	subi	r27, 0xF8	; 248
 5be:	39 f0       	breq	.+14     	; 0x5ce <__fixunssfsi+0x4c>
 5c0:	b9 3f       	cpi	r27, 0xF9	; 249
 5c2:	cc f3       	brlt	.-14     	; 0x5b6 <__fixunssfsi+0x34>
 5c4:	86 95       	lsr	r24
 5c6:	77 95       	ror	r23
 5c8:	67 95       	ror	r22
 5ca:	b3 95       	inc	r27
 5cc:	d9 f7       	brne	.-10     	; 0x5c4 <__fixunssfsi+0x42>
 5ce:	3e f4       	brtc	.+14     	; 0x5de <__fixunssfsi+0x5c>
 5d0:	90 95       	com	r25
 5d2:	80 95       	com	r24
 5d4:	70 95       	com	r23
 5d6:	61 95       	neg	r22
 5d8:	7f 4f       	sbci	r23, 0xFF	; 255
 5da:	8f 4f       	sbci	r24, 0xFF	; 255
 5dc:	9f 4f       	sbci	r25, 0xFF	; 255
 5de:	08 95       	ret

000005e0 <__floatunsisf>:
 5e0:	e8 94       	clt
 5e2:	09 c0       	rjmp	.+18     	; 0x5f6 <__floatsisf+0x12>

000005e4 <__floatsisf>:
 5e4:	97 fb       	bst	r25, 7
 5e6:	3e f4       	brtc	.+14     	; 0x5f6 <__floatsisf+0x12>
 5e8:	90 95       	com	r25
 5ea:	80 95       	com	r24
 5ec:	70 95       	com	r23
 5ee:	61 95       	neg	r22
 5f0:	7f 4f       	sbci	r23, 0xFF	; 255
 5f2:	8f 4f       	sbci	r24, 0xFF	; 255
 5f4:	9f 4f       	sbci	r25, 0xFF	; 255
 5f6:	99 23       	and	r25, r25
 5f8:	a9 f0       	breq	.+42     	; 0x624 <__floatsisf+0x40>
 5fa:	f9 2f       	mov	r31, r25
 5fc:	96 e9       	ldi	r25, 0x96	; 150
 5fe:	bb 27       	eor	r27, r27
 600:	93 95       	inc	r25
 602:	f6 95       	lsr	r31
 604:	87 95       	ror	r24
 606:	77 95       	ror	r23
 608:	67 95       	ror	r22
 60a:	b7 95       	ror	r27
 60c:	f1 11       	cpse	r31, r1
 60e:	f8 cf       	rjmp	.-16     	; 0x600 <__floatsisf+0x1c>
 610:	fa f4       	brpl	.+62     	; 0x650 <__floatsisf+0x6c>
 612:	bb 0f       	add	r27, r27
 614:	11 f4       	brne	.+4      	; 0x61a <__floatsisf+0x36>
 616:	60 ff       	sbrs	r22, 0
 618:	1b c0       	rjmp	.+54     	; 0x650 <__floatsisf+0x6c>
 61a:	6f 5f       	subi	r22, 0xFF	; 255
 61c:	7f 4f       	sbci	r23, 0xFF	; 255
 61e:	8f 4f       	sbci	r24, 0xFF	; 255
 620:	9f 4f       	sbci	r25, 0xFF	; 255
 622:	16 c0       	rjmp	.+44     	; 0x650 <__floatsisf+0x6c>
 624:	88 23       	and	r24, r24
 626:	11 f0       	breq	.+4      	; 0x62c <__floatsisf+0x48>
 628:	96 e9       	ldi	r25, 0x96	; 150
 62a:	11 c0       	rjmp	.+34     	; 0x64e <__floatsisf+0x6a>
 62c:	77 23       	and	r23, r23
 62e:	21 f0       	breq	.+8      	; 0x638 <__floatsisf+0x54>
 630:	9e e8       	ldi	r25, 0x8E	; 142
 632:	87 2f       	mov	r24, r23
 634:	76 2f       	mov	r23, r22
 636:	05 c0       	rjmp	.+10     	; 0x642 <__floatsisf+0x5e>
 638:	66 23       	and	r22, r22
 63a:	71 f0       	breq	.+28     	; 0x658 <__floatsisf+0x74>
 63c:	96 e8       	ldi	r25, 0x86	; 134
 63e:	86 2f       	mov	r24, r22
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	60 e0       	ldi	r22, 0x00	; 0
 644:	2a f0       	brmi	.+10     	; 0x650 <__floatsisf+0x6c>
 646:	9a 95       	dec	r25
 648:	66 0f       	add	r22, r22
 64a:	77 1f       	adc	r23, r23
 64c:	88 1f       	adc	r24, r24
 64e:	da f7       	brpl	.-10     	; 0x646 <__floatsisf+0x62>
 650:	88 0f       	add	r24, r24
 652:	96 95       	lsr	r25
 654:	87 95       	ror	r24
 656:	97 f9       	bld	r25, 7
 658:	08 95       	ret

0000065a <__fp_split3>:
 65a:	57 fd       	sbrc	r21, 7
 65c:	90 58       	subi	r25, 0x80	; 128
 65e:	44 0f       	add	r20, r20
 660:	55 1f       	adc	r21, r21
 662:	59 f0       	breq	.+22     	; 0x67a <__fp_splitA+0x10>
 664:	5f 3f       	cpi	r21, 0xFF	; 255
 666:	71 f0       	breq	.+28     	; 0x684 <__fp_splitA+0x1a>
 668:	47 95       	ror	r20

0000066a <__fp_splitA>:
 66a:	88 0f       	add	r24, r24
 66c:	97 fb       	bst	r25, 7
 66e:	99 1f       	adc	r25, r25
 670:	61 f0       	breq	.+24     	; 0x68a <__fp_splitA+0x20>
 672:	9f 3f       	cpi	r25, 0xFF	; 255
 674:	79 f0       	breq	.+30     	; 0x694 <__fp_splitA+0x2a>
 676:	87 95       	ror	r24
 678:	08 95       	ret
 67a:	12 16       	cp	r1, r18
 67c:	13 06       	cpc	r1, r19
 67e:	14 06       	cpc	r1, r20
 680:	55 1f       	adc	r21, r21
 682:	f2 cf       	rjmp	.-28     	; 0x668 <__fp_split3+0xe>
 684:	46 95       	lsr	r20
 686:	f1 df       	rcall	.-30     	; 0x66a <__fp_splitA>
 688:	08 c0       	rjmp	.+16     	; 0x69a <__fp_splitA+0x30>
 68a:	16 16       	cp	r1, r22
 68c:	17 06       	cpc	r1, r23
 68e:	18 06       	cpc	r1, r24
 690:	99 1f       	adc	r25, r25
 692:	f1 cf       	rjmp	.-30     	; 0x676 <__fp_splitA+0xc>
 694:	86 95       	lsr	r24
 696:	71 05       	cpc	r23, r1
 698:	61 05       	cpc	r22, r1
 69a:	08 94       	sec
 69c:	08 95       	ret

0000069e <__fp_zero>:
 69e:	e8 94       	clt

000006a0 <__fp_szero>:
 6a0:	bb 27       	eor	r27, r27
 6a2:	66 27       	eor	r22, r22
 6a4:	77 27       	eor	r23, r23
 6a6:	cb 01       	movw	r24, r22
 6a8:	97 f9       	bld	r25, 7
 6aa:	08 95       	ret

000006ac <__mulsf3>:
 6ac:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__mulsf3x>
 6b0:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <__fp_round>
 6b4:	0e 94 cc 03 	call	0x798	; 0x798 <__fp_pscA>
 6b8:	38 f0       	brcs	.+14     	; 0x6c8 <__mulsf3+0x1c>
 6ba:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__fp_pscB>
 6be:	20 f0       	brcs	.+8      	; 0x6c8 <__mulsf3+0x1c>
 6c0:	95 23       	and	r25, r21
 6c2:	11 f0       	breq	.+4      	; 0x6c8 <__mulsf3+0x1c>
 6c4:	0c 94 c3 03 	jmp	0x786	; 0x786 <__fp_inf>
 6c8:	0c 94 c9 03 	jmp	0x792	; 0x792 <__fp_nan>
 6cc:	11 24       	eor	r1, r1
 6ce:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_szero>

000006d2 <__mulsf3x>:
 6d2:	0e 94 2d 03 	call	0x65a	; 0x65a <__fp_split3>
 6d6:	70 f3       	brcs	.-36     	; 0x6b4 <__mulsf3+0x8>

000006d8 <__mulsf3_pse>:
 6d8:	95 9f       	mul	r25, r21
 6da:	c1 f3       	breq	.-16     	; 0x6cc <__mulsf3+0x20>
 6dc:	95 0f       	add	r25, r21
 6de:	50 e0       	ldi	r21, 0x00	; 0
 6e0:	55 1f       	adc	r21, r21
 6e2:	62 9f       	mul	r22, r18
 6e4:	f0 01       	movw	r30, r0
 6e6:	72 9f       	mul	r23, r18
 6e8:	bb 27       	eor	r27, r27
 6ea:	f0 0d       	add	r31, r0
 6ec:	b1 1d       	adc	r27, r1
 6ee:	63 9f       	mul	r22, r19
 6f0:	aa 27       	eor	r26, r26
 6f2:	f0 0d       	add	r31, r0
 6f4:	b1 1d       	adc	r27, r1
 6f6:	aa 1f       	adc	r26, r26
 6f8:	64 9f       	mul	r22, r20
 6fa:	66 27       	eor	r22, r22
 6fc:	b0 0d       	add	r27, r0
 6fe:	a1 1d       	adc	r26, r1
 700:	66 1f       	adc	r22, r22
 702:	82 9f       	mul	r24, r18
 704:	22 27       	eor	r18, r18
 706:	b0 0d       	add	r27, r0
 708:	a1 1d       	adc	r26, r1
 70a:	62 1f       	adc	r22, r18
 70c:	73 9f       	mul	r23, r19
 70e:	b0 0d       	add	r27, r0
 710:	a1 1d       	adc	r26, r1
 712:	62 1f       	adc	r22, r18
 714:	83 9f       	mul	r24, r19
 716:	a0 0d       	add	r26, r0
 718:	61 1d       	adc	r22, r1
 71a:	22 1f       	adc	r18, r18
 71c:	74 9f       	mul	r23, r20
 71e:	33 27       	eor	r19, r19
 720:	a0 0d       	add	r26, r0
 722:	61 1d       	adc	r22, r1
 724:	23 1f       	adc	r18, r19
 726:	84 9f       	mul	r24, r20
 728:	60 0d       	add	r22, r0
 72a:	21 1d       	adc	r18, r1
 72c:	82 2f       	mov	r24, r18
 72e:	76 2f       	mov	r23, r22
 730:	6a 2f       	mov	r22, r26
 732:	11 24       	eor	r1, r1
 734:	9f 57       	subi	r25, 0x7F	; 127
 736:	50 40       	sbci	r21, 0x00	; 0
 738:	9a f0       	brmi	.+38     	; 0x760 <__mulsf3_pse+0x88>
 73a:	f1 f0       	breq	.+60     	; 0x778 <__mulsf3_pse+0xa0>
 73c:	88 23       	and	r24, r24
 73e:	4a f0       	brmi	.+18     	; 0x752 <__mulsf3_pse+0x7a>
 740:	ee 0f       	add	r30, r30
 742:	ff 1f       	adc	r31, r31
 744:	bb 1f       	adc	r27, r27
 746:	66 1f       	adc	r22, r22
 748:	77 1f       	adc	r23, r23
 74a:	88 1f       	adc	r24, r24
 74c:	91 50       	subi	r25, 0x01	; 1
 74e:	50 40       	sbci	r21, 0x00	; 0
 750:	a9 f7       	brne	.-22     	; 0x73c <__mulsf3_pse+0x64>
 752:	9e 3f       	cpi	r25, 0xFE	; 254
 754:	51 05       	cpc	r21, r1
 756:	80 f0       	brcs	.+32     	; 0x778 <__mulsf3_pse+0xa0>
 758:	0c 94 c3 03 	jmp	0x786	; 0x786 <__fp_inf>
 75c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_szero>
 760:	5f 3f       	cpi	r21, 0xFF	; 255
 762:	e4 f3       	brlt	.-8      	; 0x75c <__mulsf3_pse+0x84>
 764:	98 3e       	cpi	r25, 0xE8	; 232
 766:	d4 f3       	brlt	.-12     	; 0x75c <__mulsf3_pse+0x84>
 768:	86 95       	lsr	r24
 76a:	77 95       	ror	r23
 76c:	67 95       	ror	r22
 76e:	b7 95       	ror	r27
 770:	f7 95       	ror	r31
 772:	e7 95       	ror	r30
 774:	9f 5f       	subi	r25, 0xFF	; 255
 776:	c1 f7       	brne	.-16     	; 0x768 <__mulsf3_pse+0x90>
 778:	fe 2b       	or	r31, r30
 77a:	88 0f       	add	r24, r24
 77c:	91 1d       	adc	r25, r1
 77e:	96 95       	lsr	r25
 780:	87 95       	ror	r24
 782:	97 f9       	bld	r25, 7
 784:	08 95       	ret

00000786 <__fp_inf>:
 786:	97 f9       	bld	r25, 7
 788:	9f 67       	ori	r25, 0x7F	; 127
 78a:	80 e8       	ldi	r24, 0x80	; 128
 78c:	70 e0       	ldi	r23, 0x00	; 0
 78e:	60 e0       	ldi	r22, 0x00	; 0
 790:	08 95       	ret

00000792 <__fp_nan>:
 792:	9f ef       	ldi	r25, 0xFF	; 255
 794:	80 ec       	ldi	r24, 0xC0	; 192
 796:	08 95       	ret

00000798 <__fp_pscA>:
 798:	00 24       	eor	r0, r0
 79a:	0a 94       	dec	r0
 79c:	16 16       	cp	r1, r22
 79e:	17 06       	cpc	r1, r23
 7a0:	18 06       	cpc	r1, r24
 7a2:	09 06       	cpc	r0, r25
 7a4:	08 95       	ret

000007a6 <__fp_pscB>:
 7a6:	00 24       	eor	r0, r0
 7a8:	0a 94       	dec	r0
 7aa:	12 16       	cp	r1, r18
 7ac:	13 06       	cpc	r1, r19
 7ae:	14 06       	cpc	r1, r20
 7b0:	05 06       	cpc	r0, r21
 7b2:	08 95       	ret

000007b4 <__fp_round>:
 7b4:	09 2e       	mov	r0, r25
 7b6:	03 94       	inc	r0
 7b8:	00 0c       	add	r0, r0
 7ba:	11 f4       	brne	.+4      	; 0x7c0 <__fp_round+0xc>
 7bc:	88 23       	and	r24, r24
 7be:	52 f0       	brmi	.+20     	; 0x7d4 <__fp_round+0x20>
 7c0:	bb 0f       	add	r27, r27
 7c2:	40 f4       	brcc	.+16     	; 0x7d4 <__fp_round+0x20>
 7c4:	bf 2b       	or	r27, r31
 7c6:	11 f4       	brne	.+4      	; 0x7cc <__fp_round+0x18>
 7c8:	60 ff       	sbrs	r22, 0
 7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <__fp_round+0x20>
 7cc:	6f 5f       	subi	r22, 0xFF	; 255
 7ce:	7f 4f       	sbci	r23, 0xFF	; 255
 7d0:	8f 4f       	sbci	r24, 0xFF	; 255
 7d2:	9f 4f       	sbci	r25, 0xFF	; 255
 7d4:	08 95       	ret

000007d6 <dtostrf>:
 7d6:	ef 92       	push	r14
 7d8:	0f 93       	push	r16
 7da:	1f 93       	push	r17
 7dc:	cf 93       	push	r28
 7de:	df 93       	push	r29
 7e0:	e8 01       	movw	r28, r16
 7e2:	47 fd       	sbrc	r20, 7
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <dtostrf+0x14>
 7e6:	34 e0       	ldi	r19, 0x04	; 4
 7e8:	01 c0       	rjmp	.+2      	; 0x7ec <dtostrf+0x16>
 7ea:	34 e1       	ldi	r19, 0x14	; 20
 7ec:	04 2e       	mov	r0, r20
 7ee:	00 0c       	add	r0, r0
 7f0:	55 0b       	sbc	r21, r21
 7f2:	57 ff       	sbrs	r21, 7
 7f4:	03 c0       	rjmp	.+6      	; 0x7fc <dtostrf+0x26>
 7f6:	51 95       	neg	r21
 7f8:	41 95       	neg	r20
 7fa:	51 09       	sbc	r21, r1
 7fc:	e3 2e       	mov	r14, r19
 7fe:	02 2f       	mov	r16, r18
 800:	24 2f       	mov	r18, r20
 802:	ae 01       	movw	r20, r28
 804:	0e 94 0b 04 	call	0x816	; 0x816 <dtoa_prf>
 808:	ce 01       	movw	r24, r28
 80a:	df 91       	pop	r29
 80c:	cf 91       	pop	r28
 80e:	1f 91       	pop	r17
 810:	0f 91       	pop	r16
 812:	ef 90       	pop	r14
 814:	08 95       	ret

00000816 <dtoa_prf>:
 816:	a9 e0       	ldi	r26, 0x09	; 9
 818:	b0 e0       	ldi	r27, 0x00	; 0
 81a:	e1 e1       	ldi	r30, 0x11	; 17
 81c:	f4 e0       	ldi	r31, 0x04	; 4
 81e:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__prologue_saves__+0xc>
 822:	6a 01       	movw	r12, r20
 824:	12 2f       	mov	r17, r18
 826:	b0 2e       	mov	r11, r16
 828:	2b e3       	ldi	r18, 0x3B	; 59
 82a:	20 17       	cp	r18, r16
 82c:	20 f0       	brcs	.+8      	; 0x836 <dtoa_prf+0x20>
 82e:	ff 24       	eor	r15, r15
 830:	f3 94       	inc	r15
 832:	f0 0e       	add	r15, r16
 834:	02 c0       	rjmp	.+4      	; 0x83a <dtoa_prf+0x24>
 836:	2c e3       	ldi	r18, 0x3C	; 60
 838:	f2 2e       	mov	r15, r18
 83a:	0f 2d       	mov	r16, r15
 83c:	27 e0       	ldi	r18, 0x07	; 7
 83e:	ae 01       	movw	r20, r28
 840:	4f 5f       	subi	r20, 0xFF	; 255
 842:	5f 4f       	sbci	r21, 0xFF	; 255
 844:	0e 94 65 05 	call	0xaca	; 0xaca <__ftoa_engine>
 848:	bc 01       	movw	r22, r24
 84a:	49 81       	ldd	r20, Y+1	; 0x01
 84c:	84 2f       	mov	r24, r20
 84e:	89 70       	andi	r24, 0x09	; 9
 850:	81 30       	cpi	r24, 0x01	; 1
 852:	31 f0       	breq	.+12     	; 0x860 <dtoa_prf+0x4a>
 854:	e1 fc       	sbrc	r14, 1
 856:	06 c0       	rjmp	.+12     	; 0x864 <dtoa_prf+0x4e>
 858:	e0 fe       	sbrs	r14, 0
 85a:	06 c0       	rjmp	.+12     	; 0x868 <dtoa_prf+0x52>
 85c:	90 e2       	ldi	r25, 0x20	; 32
 85e:	05 c0       	rjmp	.+10     	; 0x86a <dtoa_prf+0x54>
 860:	9d e2       	ldi	r25, 0x2D	; 45
 862:	03 c0       	rjmp	.+6      	; 0x86a <dtoa_prf+0x54>
 864:	9b e2       	ldi	r25, 0x2B	; 43
 866:	01 c0       	rjmp	.+2      	; 0x86a <dtoa_prf+0x54>
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	5e 2d       	mov	r21, r14
 86c:	50 71       	andi	r21, 0x10	; 16
 86e:	43 ff       	sbrs	r20, 3
 870:	3c c0       	rjmp	.+120    	; 0x8ea <dtoa_prf+0xd4>
 872:	91 11       	cpse	r25, r1
 874:	02 c0       	rjmp	.+4      	; 0x87a <dtoa_prf+0x64>
 876:	83 e0       	ldi	r24, 0x03	; 3
 878:	01 c0       	rjmp	.+2      	; 0x87c <dtoa_prf+0x66>
 87a:	84 e0       	ldi	r24, 0x04	; 4
 87c:	81 17       	cp	r24, r17
 87e:	18 f4       	brcc	.+6      	; 0x886 <dtoa_prf+0x70>
 880:	21 2f       	mov	r18, r17
 882:	28 1b       	sub	r18, r24
 884:	01 c0       	rjmp	.+2      	; 0x888 <dtoa_prf+0x72>
 886:	20 e0       	ldi	r18, 0x00	; 0
 888:	51 11       	cpse	r21, r1
 88a:	0b c0       	rjmp	.+22     	; 0x8a2 <dtoa_prf+0x8c>
 88c:	f6 01       	movw	r30, r12
 88e:	82 2f       	mov	r24, r18
 890:	30 e2       	ldi	r19, 0x20	; 32
 892:	88 23       	and	r24, r24
 894:	19 f0       	breq	.+6      	; 0x89c <dtoa_prf+0x86>
 896:	31 93       	st	Z+, r19
 898:	81 50       	subi	r24, 0x01	; 1
 89a:	fb cf       	rjmp	.-10     	; 0x892 <dtoa_prf+0x7c>
 89c:	c2 0e       	add	r12, r18
 89e:	d1 1c       	adc	r13, r1
 8a0:	20 e0       	ldi	r18, 0x00	; 0
 8a2:	99 23       	and	r25, r25
 8a4:	29 f0       	breq	.+10     	; 0x8b0 <dtoa_prf+0x9a>
 8a6:	d6 01       	movw	r26, r12
 8a8:	9c 93       	st	X, r25
 8aa:	f6 01       	movw	r30, r12
 8ac:	31 96       	adiw	r30, 0x01	; 1
 8ae:	6f 01       	movw	r12, r30
 8b0:	c6 01       	movw	r24, r12
 8b2:	03 96       	adiw	r24, 0x03	; 3
 8b4:	e2 fe       	sbrs	r14, 2
 8b6:	0a c0       	rjmp	.+20     	; 0x8cc <dtoa_prf+0xb6>
 8b8:	3e e4       	ldi	r19, 0x4E	; 78
 8ba:	d6 01       	movw	r26, r12
 8bc:	3c 93       	st	X, r19
 8be:	41 e4       	ldi	r20, 0x41	; 65
 8c0:	11 96       	adiw	r26, 0x01	; 1
 8c2:	4c 93       	st	X, r20
 8c4:	11 97       	sbiw	r26, 0x01	; 1
 8c6:	12 96       	adiw	r26, 0x02	; 2
 8c8:	3c 93       	st	X, r19
 8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <dtoa_prf+0xc2>
 8cc:	3e e6       	ldi	r19, 0x6E	; 110
 8ce:	f6 01       	movw	r30, r12
 8d0:	30 83       	st	Z, r19
 8d2:	41 e6       	ldi	r20, 0x61	; 97
 8d4:	41 83       	std	Z+1, r20	; 0x01
 8d6:	32 83       	std	Z+2, r19	; 0x02
 8d8:	fc 01       	movw	r30, r24
 8da:	32 2f       	mov	r19, r18
 8dc:	40 e2       	ldi	r20, 0x20	; 32
 8de:	33 23       	and	r19, r19
 8e0:	09 f4       	brne	.+2      	; 0x8e4 <dtoa_prf+0xce>
 8e2:	42 c0       	rjmp	.+132    	; 0x968 <__stack+0x69>
 8e4:	41 93       	st	Z+, r20
 8e6:	31 50       	subi	r19, 0x01	; 1
 8e8:	fa cf       	rjmp	.-12     	; 0x8de <dtoa_prf+0xc8>
 8ea:	42 ff       	sbrs	r20, 2
 8ec:	44 c0       	rjmp	.+136    	; 0x976 <__stack+0x77>
 8ee:	91 11       	cpse	r25, r1
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <dtoa_prf+0xe0>
 8f2:	83 e0       	ldi	r24, 0x03	; 3
 8f4:	01 c0       	rjmp	.+2      	; 0x8f8 <dtoa_prf+0xe2>
 8f6:	84 e0       	ldi	r24, 0x04	; 4
 8f8:	81 17       	cp	r24, r17
 8fa:	18 f4       	brcc	.+6      	; 0x902 <__stack+0x3>
 8fc:	21 2f       	mov	r18, r17
 8fe:	28 1b       	sub	r18, r24
 900:	01 c0       	rjmp	.+2      	; 0x904 <__stack+0x5>
 902:	20 e0       	ldi	r18, 0x00	; 0
 904:	51 11       	cpse	r21, r1
 906:	0b c0       	rjmp	.+22     	; 0x91e <__stack+0x1f>
 908:	f6 01       	movw	r30, r12
 90a:	82 2f       	mov	r24, r18
 90c:	30 e2       	ldi	r19, 0x20	; 32
 90e:	88 23       	and	r24, r24
 910:	19 f0       	breq	.+6      	; 0x918 <__stack+0x19>
 912:	31 93       	st	Z+, r19
 914:	81 50       	subi	r24, 0x01	; 1
 916:	fb cf       	rjmp	.-10     	; 0x90e <__stack+0xf>
 918:	c2 0e       	add	r12, r18
 91a:	d1 1c       	adc	r13, r1
 91c:	20 e0       	ldi	r18, 0x00	; 0
 91e:	99 23       	and	r25, r25
 920:	29 f0       	breq	.+10     	; 0x92c <__stack+0x2d>
 922:	d6 01       	movw	r26, r12
 924:	9c 93       	st	X, r25
 926:	f6 01       	movw	r30, r12
 928:	31 96       	adiw	r30, 0x01	; 1
 92a:	6f 01       	movw	r12, r30
 92c:	c6 01       	movw	r24, r12
 92e:	03 96       	adiw	r24, 0x03	; 3
 930:	e2 fe       	sbrs	r14, 2
 932:	0b c0       	rjmp	.+22     	; 0x94a <__stack+0x4b>
 934:	39 e4       	ldi	r19, 0x49	; 73
 936:	d6 01       	movw	r26, r12
 938:	3c 93       	st	X, r19
 93a:	3e e4       	ldi	r19, 0x4E	; 78
 93c:	11 96       	adiw	r26, 0x01	; 1
 93e:	3c 93       	st	X, r19
 940:	11 97       	sbiw	r26, 0x01	; 1
 942:	36 e4       	ldi	r19, 0x46	; 70
 944:	12 96       	adiw	r26, 0x02	; 2
 946:	3c 93       	st	X, r19
 948:	07 c0       	rjmp	.+14     	; 0x958 <__stack+0x59>
 94a:	39 e6       	ldi	r19, 0x69	; 105
 94c:	f6 01       	movw	r30, r12
 94e:	30 83       	st	Z, r19
 950:	3e e6       	ldi	r19, 0x6E	; 110
 952:	31 83       	std	Z+1, r19	; 0x01
 954:	36 e6       	ldi	r19, 0x66	; 102
 956:	32 83       	std	Z+2, r19	; 0x02
 958:	fc 01       	movw	r30, r24
 95a:	32 2f       	mov	r19, r18
 95c:	40 e2       	ldi	r20, 0x20	; 32
 95e:	33 23       	and	r19, r19
 960:	19 f0       	breq	.+6      	; 0x968 <__stack+0x69>
 962:	41 93       	st	Z+, r20
 964:	31 50       	subi	r19, 0x01	; 1
 966:	fb cf       	rjmp	.-10     	; 0x95e <__stack+0x5f>
 968:	fc 01       	movw	r30, r24
 96a:	e2 0f       	add	r30, r18
 96c:	f1 1d       	adc	r31, r1
 96e:	10 82       	st	Z, r1
 970:	8e ef       	ldi	r24, 0xFE	; 254
 972:	9f ef       	ldi	r25, 0xFF	; 255
 974:	a6 c0       	rjmp	.+332    	; 0xac2 <__stack+0x1c3>
 976:	21 e0       	ldi	r18, 0x01	; 1
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	91 11       	cpse	r25, r1
 97c:	02 c0       	rjmp	.+4      	; 0x982 <__stack+0x83>
 97e:	20 e0       	ldi	r18, 0x00	; 0
 980:	30 e0       	ldi	r19, 0x00	; 0
 982:	16 16       	cp	r1, r22
 984:	17 06       	cpc	r1, r23
 986:	1c f4       	brge	.+6      	; 0x98e <__stack+0x8f>
 988:	fb 01       	movw	r30, r22
 98a:	31 96       	adiw	r30, 0x01	; 1
 98c:	02 c0       	rjmp	.+4      	; 0x992 <__stack+0x93>
 98e:	e1 e0       	ldi	r30, 0x01	; 1
 990:	f0 e0       	ldi	r31, 0x00	; 0
 992:	2e 0f       	add	r18, r30
 994:	3f 1f       	adc	r19, r31
 996:	bb 20       	and	r11, r11
 998:	21 f0       	breq	.+8      	; 0x9a2 <__stack+0xa3>
 99a:	eb 2d       	mov	r30, r11
 99c:	f0 e0       	ldi	r31, 0x00	; 0
 99e:	31 96       	adiw	r30, 0x01	; 1
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <__stack+0xa7>
 9a2:	e0 e0       	ldi	r30, 0x00	; 0
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	2e 0f       	add	r18, r30
 9a8:	3f 1f       	adc	r19, r31
 9aa:	e1 2f       	mov	r30, r17
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	2e 17       	cp	r18, r30
 9b0:	3f 07       	cpc	r19, r31
 9b2:	1c f4       	brge	.+6      	; 0x9ba <__stack+0xbb>
 9b4:	12 1b       	sub	r17, r18
 9b6:	21 2f       	mov	r18, r17
 9b8:	01 c0       	rjmp	.+2      	; 0x9bc <__stack+0xbd>
 9ba:	20 e0       	ldi	r18, 0x00	; 0
 9bc:	8e 2d       	mov	r24, r14
 9be:	88 71       	andi	r24, 0x18	; 24
 9c0:	59 f4       	brne	.+22     	; 0x9d8 <__stack+0xd9>
 9c2:	f6 01       	movw	r30, r12
 9c4:	82 2f       	mov	r24, r18
 9c6:	30 e2       	ldi	r19, 0x20	; 32
 9c8:	88 23       	and	r24, r24
 9ca:	19 f0       	breq	.+6      	; 0x9d2 <__stack+0xd3>
 9cc:	31 93       	st	Z+, r19
 9ce:	81 50       	subi	r24, 0x01	; 1
 9d0:	fb cf       	rjmp	.-10     	; 0x9c8 <__stack+0xc9>
 9d2:	c2 0e       	add	r12, r18
 9d4:	d1 1c       	adc	r13, r1
 9d6:	20 e0       	ldi	r18, 0x00	; 0
 9d8:	99 23       	and	r25, r25
 9da:	29 f0       	breq	.+10     	; 0x9e6 <__stack+0xe7>
 9dc:	d6 01       	movw	r26, r12
 9de:	9c 93       	st	X, r25
 9e0:	f6 01       	movw	r30, r12
 9e2:	31 96       	adiw	r30, 0x01	; 1
 9e4:	6f 01       	movw	r12, r30
 9e6:	51 11       	cpse	r21, r1
 9e8:	0b c0       	rjmp	.+22     	; 0xa00 <__stack+0x101>
 9ea:	f6 01       	movw	r30, r12
 9ec:	82 2f       	mov	r24, r18
 9ee:	90 e3       	ldi	r25, 0x30	; 48
 9f0:	88 23       	and	r24, r24
 9f2:	19 f0       	breq	.+6      	; 0x9fa <__stack+0xfb>
 9f4:	91 93       	st	Z+, r25
 9f6:	81 50       	subi	r24, 0x01	; 1
 9f8:	fb cf       	rjmp	.-10     	; 0x9f0 <__stack+0xf1>
 9fa:	c2 0e       	add	r12, r18
 9fc:	d1 1c       	adc	r13, r1
 9fe:	20 e0       	ldi	r18, 0x00	; 0
 a00:	0f 2d       	mov	r16, r15
 a02:	06 0f       	add	r16, r22
 a04:	9a 81       	ldd	r25, Y+2	; 0x02
 a06:	34 2f       	mov	r19, r20
 a08:	30 71       	andi	r19, 0x10	; 16
 a0a:	44 ff       	sbrs	r20, 4
 a0c:	03 c0       	rjmp	.+6      	; 0xa14 <__stack+0x115>
 a0e:	91 33       	cpi	r25, 0x31	; 49
 a10:	09 f4       	brne	.+2      	; 0xa14 <__stack+0x115>
 a12:	01 50       	subi	r16, 0x01	; 1
 a14:	10 16       	cp	r1, r16
 a16:	24 f4       	brge	.+8      	; 0xa20 <__stack+0x121>
 a18:	09 30       	cpi	r16, 0x09	; 9
 a1a:	18 f0       	brcs	.+6      	; 0xa22 <__stack+0x123>
 a1c:	08 e0       	ldi	r16, 0x08	; 8
 a1e:	01 c0       	rjmp	.+2      	; 0xa22 <__stack+0x123>
 a20:	01 e0       	ldi	r16, 0x01	; 1
 a22:	ab 01       	movw	r20, r22
 a24:	77 ff       	sbrs	r23, 7
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <__stack+0x12d>
 a28:	40 e0       	ldi	r20, 0x00	; 0
 a2a:	50 e0       	ldi	r21, 0x00	; 0
 a2c:	fb 01       	movw	r30, r22
 a2e:	e4 1b       	sub	r30, r20
 a30:	f5 0b       	sbc	r31, r21
 a32:	a1 e0       	ldi	r26, 0x01	; 1
 a34:	b0 e0       	ldi	r27, 0x00	; 0
 a36:	ac 0f       	add	r26, r28
 a38:	bd 1f       	adc	r27, r29
 a3a:	ea 0f       	add	r30, r26
 a3c:	fb 1f       	adc	r31, r27
 a3e:	8e e2       	ldi	r24, 0x2E	; 46
 a40:	a8 2e       	mov	r10, r24
 a42:	4b 01       	movw	r8, r22
 a44:	80 1a       	sub	r8, r16
 a46:	91 08       	sbc	r9, r1
 a48:	0b 2d       	mov	r16, r11
 a4a:	10 e0       	ldi	r17, 0x00	; 0
 a4c:	11 95       	neg	r17
 a4e:	01 95       	neg	r16
 a50:	11 09       	sbc	r17, r1
 a52:	4f 3f       	cpi	r20, 0xFF	; 255
 a54:	bf ef       	ldi	r27, 0xFF	; 255
 a56:	5b 07       	cpc	r21, r27
 a58:	21 f4       	brne	.+8      	; 0xa62 <__stack+0x163>
 a5a:	d6 01       	movw	r26, r12
 a5c:	ac 92       	st	X, r10
 a5e:	11 96       	adiw	r26, 0x01	; 1
 a60:	6d 01       	movw	r12, r26
 a62:	64 17       	cp	r22, r20
 a64:	75 07       	cpc	r23, r21
 a66:	2c f0       	brlt	.+10     	; 0xa72 <__stack+0x173>
 a68:	84 16       	cp	r8, r20
 a6a:	95 06       	cpc	r9, r21
 a6c:	14 f4       	brge	.+4      	; 0xa72 <__stack+0x173>
 a6e:	81 81       	ldd	r24, Z+1	; 0x01
 a70:	01 c0       	rjmp	.+2      	; 0xa74 <__stack+0x175>
 a72:	80 e3       	ldi	r24, 0x30	; 48
 a74:	41 50       	subi	r20, 0x01	; 1
 a76:	51 09       	sbc	r21, r1
 a78:	31 96       	adiw	r30, 0x01	; 1
 a7a:	d6 01       	movw	r26, r12
 a7c:	11 96       	adiw	r26, 0x01	; 1
 a7e:	7d 01       	movw	r14, r26
 a80:	40 17       	cp	r20, r16
 a82:	51 07       	cpc	r21, r17
 a84:	24 f0       	brlt	.+8      	; 0xa8e <__stack+0x18f>
 a86:	d6 01       	movw	r26, r12
 a88:	8c 93       	st	X, r24
 a8a:	67 01       	movw	r12, r14
 a8c:	e2 cf       	rjmp	.-60     	; 0xa52 <__stack+0x153>
 a8e:	64 17       	cp	r22, r20
 a90:	75 07       	cpc	r23, r21
 a92:	39 f4       	brne	.+14     	; 0xaa2 <__stack+0x1a3>
 a94:	96 33       	cpi	r25, 0x36	; 54
 a96:	20 f4       	brcc	.+8      	; 0xaa0 <__stack+0x1a1>
 a98:	95 33       	cpi	r25, 0x35	; 53
 a9a:	19 f4       	brne	.+6      	; 0xaa2 <__stack+0x1a3>
 a9c:	31 11       	cpse	r19, r1
 a9e:	01 c0       	rjmp	.+2      	; 0xaa2 <__stack+0x1a3>
 aa0:	81 e3       	ldi	r24, 0x31	; 49
 aa2:	f6 01       	movw	r30, r12
 aa4:	80 83       	st	Z, r24
 aa6:	f7 01       	movw	r30, r14
 aa8:	82 2f       	mov	r24, r18
 aaa:	90 e2       	ldi	r25, 0x20	; 32
 aac:	88 23       	and	r24, r24
 aae:	19 f0       	breq	.+6      	; 0xab6 <__stack+0x1b7>
 ab0:	91 93       	st	Z+, r25
 ab2:	81 50       	subi	r24, 0x01	; 1
 ab4:	fb cf       	rjmp	.-10     	; 0xaac <__stack+0x1ad>
 ab6:	f7 01       	movw	r30, r14
 ab8:	e2 0f       	add	r30, r18
 aba:	f1 1d       	adc	r31, r1
 abc:	10 82       	st	Z, r1
 abe:	80 e0       	ldi	r24, 0x00	; 0
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	29 96       	adiw	r28, 0x09	; 9
 ac4:	ec e0       	ldi	r30, 0x0C	; 12
 ac6:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__epilogue_restores__+0xc>

00000aca <__ftoa_engine>:
 aca:	28 30       	cpi	r18, 0x08	; 8
 acc:	08 f0       	brcs	.+2      	; 0xad0 <__ftoa_engine+0x6>
 ace:	27 e0       	ldi	r18, 0x07	; 7
 ad0:	33 27       	eor	r19, r19
 ad2:	da 01       	movw	r26, r20
 ad4:	99 0f       	add	r25, r25
 ad6:	31 1d       	adc	r19, r1
 ad8:	87 fd       	sbrc	r24, 7
 ada:	91 60       	ori	r25, 0x01	; 1
 adc:	00 96       	adiw	r24, 0x00	; 0
 ade:	61 05       	cpc	r22, r1
 ae0:	71 05       	cpc	r23, r1
 ae2:	39 f4       	brne	.+14     	; 0xaf2 <__ftoa_engine+0x28>
 ae4:	32 60       	ori	r19, 0x02	; 2
 ae6:	2e 5f       	subi	r18, 0xFE	; 254
 ae8:	3d 93       	st	X+, r19
 aea:	30 e3       	ldi	r19, 0x30	; 48
 aec:	2a 95       	dec	r18
 aee:	e1 f7       	brne	.-8      	; 0xae8 <__ftoa_engine+0x1e>
 af0:	08 95       	ret
 af2:	9f 3f       	cpi	r25, 0xFF	; 255
 af4:	30 f0       	brcs	.+12     	; 0xb02 <__ftoa_engine+0x38>
 af6:	80 38       	cpi	r24, 0x80	; 128
 af8:	71 05       	cpc	r23, r1
 afa:	61 05       	cpc	r22, r1
 afc:	09 f0       	breq	.+2      	; 0xb00 <__ftoa_engine+0x36>
 afe:	3c 5f       	subi	r19, 0xFC	; 252
 b00:	3c 5f       	subi	r19, 0xFC	; 252
 b02:	3d 93       	st	X+, r19
 b04:	91 30       	cpi	r25, 0x01	; 1
 b06:	08 f0       	brcs	.+2      	; 0xb0a <__ftoa_engine+0x40>
 b08:	80 68       	ori	r24, 0x80	; 128
 b0a:	91 1d       	adc	r25, r1
 b0c:	df 93       	push	r29
 b0e:	cf 93       	push	r28
 b10:	1f 93       	push	r17
 b12:	0f 93       	push	r16
 b14:	ff 92       	push	r15
 b16:	ef 92       	push	r14
 b18:	19 2f       	mov	r17, r25
 b1a:	98 7f       	andi	r25, 0xF8	; 248
 b1c:	96 95       	lsr	r25
 b1e:	e9 2f       	mov	r30, r25
 b20:	96 95       	lsr	r25
 b22:	96 95       	lsr	r25
 b24:	e9 0f       	add	r30, r25
 b26:	ff 27       	eor	r31, r31
 b28:	ee 53       	subi	r30, 0x3E	; 62
 b2a:	ff 4f       	sbci	r31, 0xFF	; 255
 b2c:	99 27       	eor	r25, r25
 b2e:	33 27       	eor	r19, r19
 b30:	ee 24       	eor	r14, r14
 b32:	ff 24       	eor	r15, r15
 b34:	a7 01       	movw	r20, r14
 b36:	e7 01       	movw	r28, r14
 b38:	05 90       	lpm	r0, Z+
 b3a:	08 94       	sec
 b3c:	07 94       	ror	r0
 b3e:	28 f4       	brcc	.+10     	; 0xb4a <__ftoa_engine+0x80>
 b40:	36 0f       	add	r19, r22
 b42:	e7 1e       	adc	r14, r23
 b44:	f8 1e       	adc	r15, r24
 b46:	49 1f       	adc	r20, r25
 b48:	51 1d       	adc	r21, r1
 b4a:	66 0f       	add	r22, r22
 b4c:	77 1f       	adc	r23, r23
 b4e:	88 1f       	adc	r24, r24
 b50:	99 1f       	adc	r25, r25
 b52:	06 94       	lsr	r0
 b54:	a1 f7       	brne	.-24     	; 0xb3e <__ftoa_engine+0x74>
 b56:	05 90       	lpm	r0, Z+
 b58:	07 94       	ror	r0
 b5a:	28 f4       	brcc	.+10     	; 0xb66 <__ftoa_engine+0x9c>
 b5c:	e7 0e       	add	r14, r23
 b5e:	f8 1e       	adc	r15, r24
 b60:	49 1f       	adc	r20, r25
 b62:	56 1f       	adc	r21, r22
 b64:	c1 1d       	adc	r28, r1
 b66:	77 0f       	add	r23, r23
 b68:	88 1f       	adc	r24, r24
 b6a:	99 1f       	adc	r25, r25
 b6c:	66 1f       	adc	r22, r22
 b6e:	06 94       	lsr	r0
 b70:	a1 f7       	brne	.-24     	; 0xb5a <__ftoa_engine+0x90>
 b72:	05 90       	lpm	r0, Z+
 b74:	07 94       	ror	r0
 b76:	28 f4       	brcc	.+10     	; 0xb82 <__ftoa_engine+0xb8>
 b78:	f8 0e       	add	r15, r24
 b7a:	49 1f       	adc	r20, r25
 b7c:	56 1f       	adc	r21, r22
 b7e:	c7 1f       	adc	r28, r23
 b80:	d1 1d       	adc	r29, r1
 b82:	88 0f       	add	r24, r24
 b84:	99 1f       	adc	r25, r25
 b86:	66 1f       	adc	r22, r22
 b88:	77 1f       	adc	r23, r23
 b8a:	06 94       	lsr	r0
 b8c:	a1 f7       	brne	.-24     	; 0xb76 <__ftoa_engine+0xac>
 b8e:	05 90       	lpm	r0, Z+
 b90:	07 94       	ror	r0
 b92:	20 f4       	brcc	.+8      	; 0xb9c <__ftoa_engine+0xd2>
 b94:	49 0f       	add	r20, r25
 b96:	56 1f       	adc	r21, r22
 b98:	c7 1f       	adc	r28, r23
 b9a:	d8 1f       	adc	r29, r24
 b9c:	99 0f       	add	r25, r25
 b9e:	66 1f       	adc	r22, r22
 ba0:	77 1f       	adc	r23, r23
 ba2:	88 1f       	adc	r24, r24
 ba4:	06 94       	lsr	r0
 ba6:	a9 f7       	brne	.-22     	; 0xb92 <__ftoa_engine+0xc8>
 ba8:	84 91       	lpm	r24, Z
 baa:	10 95       	com	r17
 bac:	17 70       	andi	r17, 0x07	; 7
 bae:	41 f0       	breq	.+16     	; 0xbc0 <__ftoa_engine+0xf6>
 bb0:	d6 95       	lsr	r29
 bb2:	c7 95       	ror	r28
 bb4:	57 95       	ror	r21
 bb6:	47 95       	ror	r20
 bb8:	f7 94       	ror	r15
 bba:	e7 94       	ror	r14
 bbc:	1a 95       	dec	r17
 bbe:	c1 f7       	brne	.-16     	; 0xbb0 <__ftoa_engine+0xe6>
 bc0:	e8 e6       	ldi	r30, 0x68	; 104
 bc2:	f0 e0       	ldi	r31, 0x00	; 0
 bc4:	68 94       	set
 bc6:	15 90       	lpm	r1, Z+
 bc8:	15 91       	lpm	r17, Z+
 bca:	35 91       	lpm	r19, Z+
 bcc:	65 91       	lpm	r22, Z+
 bce:	95 91       	lpm	r25, Z+
 bd0:	05 90       	lpm	r0, Z+
 bd2:	7f e2       	ldi	r23, 0x2F	; 47
 bd4:	73 95       	inc	r23
 bd6:	e1 18       	sub	r14, r1
 bd8:	f1 0a       	sbc	r15, r17
 bda:	43 0b       	sbc	r20, r19
 bdc:	56 0b       	sbc	r21, r22
 bde:	c9 0b       	sbc	r28, r25
 be0:	d0 09       	sbc	r29, r0
 be2:	c0 f7       	brcc	.-16     	; 0xbd4 <__ftoa_engine+0x10a>
 be4:	e1 0c       	add	r14, r1
 be6:	f1 1e       	adc	r15, r17
 be8:	43 1f       	adc	r20, r19
 bea:	56 1f       	adc	r21, r22
 bec:	c9 1f       	adc	r28, r25
 bee:	d0 1d       	adc	r29, r0
 bf0:	7e f4       	brtc	.+30     	; 0xc10 <__ftoa_engine+0x146>
 bf2:	70 33       	cpi	r23, 0x30	; 48
 bf4:	11 f4       	brne	.+4      	; 0xbfa <__ftoa_engine+0x130>
 bf6:	8a 95       	dec	r24
 bf8:	e6 cf       	rjmp	.-52     	; 0xbc6 <__ftoa_engine+0xfc>
 bfa:	e8 94       	clt
 bfc:	01 50       	subi	r16, 0x01	; 1
 bfe:	30 f0       	brcs	.+12     	; 0xc0c <__ftoa_engine+0x142>
 c00:	08 0f       	add	r16, r24
 c02:	0a f4       	brpl	.+2      	; 0xc06 <__ftoa_engine+0x13c>
 c04:	00 27       	eor	r16, r16
 c06:	02 17       	cp	r16, r18
 c08:	08 f4       	brcc	.+2      	; 0xc0c <__ftoa_engine+0x142>
 c0a:	20 2f       	mov	r18, r16
 c0c:	23 95       	inc	r18
 c0e:	02 2f       	mov	r16, r18
 c10:	7a 33       	cpi	r23, 0x3A	; 58
 c12:	28 f0       	brcs	.+10     	; 0xc1e <__ftoa_engine+0x154>
 c14:	79 e3       	ldi	r23, 0x39	; 57
 c16:	7d 93       	st	X+, r23
 c18:	2a 95       	dec	r18
 c1a:	e9 f7       	brne	.-6      	; 0xc16 <__ftoa_engine+0x14c>
 c1c:	10 c0       	rjmp	.+32     	; 0xc3e <__ftoa_engine+0x174>
 c1e:	7d 93       	st	X+, r23
 c20:	2a 95       	dec	r18
 c22:	89 f6       	brne	.-94     	; 0xbc6 <__ftoa_engine+0xfc>
 c24:	06 94       	lsr	r0
 c26:	97 95       	ror	r25
 c28:	67 95       	ror	r22
 c2a:	37 95       	ror	r19
 c2c:	17 95       	ror	r17
 c2e:	17 94       	ror	r1
 c30:	e1 18       	sub	r14, r1
 c32:	f1 0a       	sbc	r15, r17
 c34:	43 0b       	sbc	r20, r19
 c36:	56 0b       	sbc	r21, r22
 c38:	c9 0b       	sbc	r28, r25
 c3a:	d0 09       	sbc	r29, r0
 c3c:	98 f0       	brcs	.+38     	; 0xc64 <__ftoa_engine+0x19a>
 c3e:	23 95       	inc	r18
 c40:	7e 91       	ld	r23, -X
 c42:	73 95       	inc	r23
 c44:	7a 33       	cpi	r23, 0x3A	; 58
 c46:	08 f0       	brcs	.+2      	; 0xc4a <__ftoa_engine+0x180>
 c48:	70 e3       	ldi	r23, 0x30	; 48
 c4a:	7c 93       	st	X, r23
 c4c:	20 13       	cpse	r18, r16
 c4e:	b8 f7       	brcc	.-18     	; 0xc3e <__ftoa_engine+0x174>
 c50:	7e 91       	ld	r23, -X
 c52:	70 61       	ori	r23, 0x10	; 16
 c54:	7d 93       	st	X+, r23
 c56:	30 f0       	brcs	.+12     	; 0xc64 <__ftoa_engine+0x19a>
 c58:	83 95       	inc	r24
 c5a:	71 e3       	ldi	r23, 0x31	; 49
 c5c:	7d 93       	st	X+, r23
 c5e:	70 e3       	ldi	r23, 0x30	; 48
 c60:	2a 95       	dec	r18
 c62:	e1 f7       	brne	.-8      	; 0xc5c <__ftoa_engine+0x192>
 c64:	11 24       	eor	r1, r1
 c66:	ef 90       	pop	r14
 c68:	ff 90       	pop	r15
 c6a:	0f 91       	pop	r16
 c6c:	1f 91       	pop	r17
 c6e:	cf 91       	pop	r28
 c70:	df 91       	pop	r29
 c72:	99 27       	eor	r25, r25
 c74:	87 fd       	sbrc	r24, 7
 c76:	90 95       	com	r25
 c78:	08 95       	ret

00000c7a <__prologue_saves__>:
 c7a:	2f 92       	push	r2
 c7c:	3f 92       	push	r3
 c7e:	4f 92       	push	r4
 c80:	5f 92       	push	r5
 c82:	6f 92       	push	r6
 c84:	7f 92       	push	r7
 c86:	8f 92       	push	r8
 c88:	9f 92       	push	r9
 c8a:	af 92       	push	r10
 c8c:	bf 92       	push	r11
 c8e:	cf 92       	push	r12
 c90:	df 92       	push	r13
 c92:	ef 92       	push	r14
 c94:	ff 92       	push	r15
 c96:	0f 93       	push	r16
 c98:	1f 93       	push	r17
 c9a:	cf 93       	push	r28
 c9c:	df 93       	push	r29
 c9e:	cd b7       	in	r28, 0x3d	; 61
 ca0:	de b7       	in	r29, 0x3e	; 62
 ca2:	ca 1b       	sub	r28, r26
 ca4:	db 0b       	sbc	r29, r27
 ca6:	0f b6       	in	r0, 0x3f	; 63
 ca8:	f8 94       	cli
 caa:	de bf       	out	0x3e, r29	; 62
 cac:	0f be       	out	0x3f, r0	; 63
 cae:	cd bf       	out	0x3d, r28	; 61
 cb0:	09 94       	ijmp

00000cb2 <__epilogue_restores__>:
 cb2:	2a 88       	ldd	r2, Y+18	; 0x12
 cb4:	39 88       	ldd	r3, Y+17	; 0x11
 cb6:	48 88       	ldd	r4, Y+16	; 0x10
 cb8:	5f 84       	ldd	r5, Y+15	; 0x0f
 cba:	6e 84       	ldd	r6, Y+14	; 0x0e
 cbc:	7d 84       	ldd	r7, Y+13	; 0x0d
 cbe:	8c 84       	ldd	r8, Y+12	; 0x0c
 cc0:	9b 84       	ldd	r9, Y+11	; 0x0b
 cc2:	aa 84       	ldd	r10, Y+10	; 0x0a
 cc4:	b9 84       	ldd	r11, Y+9	; 0x09
 cc6:	c8 84       	ldd	r12, Y+8	; 0x08
 cc8:	df 80       	ldd	r13, Y+7	; 0x07
 cca:	ee 80       	ldd	r14, Y+6	; 0x06
 ccc:	fd 80       	ldd	r15, Y+5	; 0x05
 cce:	0c 81       	ldd	r16, Y+4	; 0x04
 cd0:	1b 81       	ldd	r17, Y+3	; 0x03
 cd2:	aa 81       	ldd	r26, Y+2	; 0x02
 cd4:	b9 81       	ldd	r27, Y+1	; 0x01
 cd6:	ce 0f       	add	r28, r30
 cd8:	d1 1d       	adc	r29, r1
 cda:	0f b6       	in	r0, 0x3f	; 63
 cdc:	f8 94       	cli
 cde:	de bf       	out	0x3e, r29	; 62
 ce0:	0f be       	out	0x3f, r0	; 63
 ce2:	cd bf       	out	0x3d, r28	; 61
 ce4:	ed 01       	movw	r28, r26
 ce6:	08 95       	ret

00000ce8 <_exit>:
 ce8:	f8 94       	cli

00000cea <__stop_program>:
 cea:	ff cf       	rjmp	.-2      	; 0xcea <__stop_program>
